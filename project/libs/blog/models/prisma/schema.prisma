generator client {
  provider = "prisma-client-js"
  output   = "../../../../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PostType {
  Video
  Text
  Photo
  Link
  Quote
}

enum PostStatus {
  Published
  Draft
}

model Post {
  id              String     @id @default(cuid())
  type            PostType
  status          PostStatus
  publicationDate DateTime   @map("publication_date")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  userId          String     @map("user_id")
  title           String?    @db.VarChar(50)
  description     String?    @db.VarChar(300)
  url             String?
  text            String?    @db.VarChar(1024)
  author          String?    @map("author")

  repostId String? @map("repost_id")
  repost   Post?   @relation("repost", fields: [repostId], references: [id])

  tags      Tag[]
  comments  Comment[]
  favorites Favorite[]

  post Post[] @relation("repost")
  @@map("posts")
}

model Tag {
  name  String @id @db.VarChar(10)
  posts Post[]

  @@map("tags")
}

model Comment {
  id        String   @id @default(uuid())
  message   String   @db.VarChar(300)
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  postId String @map("post_id")
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([postId])
  @@map("comments")
}

model Favorite {
  userId    String
  postId    String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@unique([userId, postId])
  @@map("favorites")
}
